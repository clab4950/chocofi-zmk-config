/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define DEFAULT_L 0

&lt {
    quick-tap-ms = <200>;
    tapping-term-ms = <200>;
};

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
        };

        slashandbackslash: slashandbackslash {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASHANDBACKSLASH";
            bindings = <&kp SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        shift_tap: shift_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };
    };

    macros {
        reformat: aacute {
            compatible = "zmk,behavior-macro";
            label = "AACUTE";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(O)) &kp LA(LC(L))>;
        };

        rename: rename {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(F6)>;
            label = "RENAME";
        };

        explore: explore {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(E)>;
            label = "EXPLORE";
        };

        comment: comment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SLASH)>;
            label = "COMMENT";
        };

        inline_comment: inline_comment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(SLASH))>;
            label = "INLINE_COMMENT";
        };

        replace: replace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(R)>;
            label = "REPLACE";
        };

        unindent: unindent {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(TAB)>;
            label = "UNINDENT";
        };

        find: find {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(F)>;
            label = "FIND";
        };

        surround: surround {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(T))>;
            label = "SURROUND";
        };

        override: override {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(O)>;
            label = "OVERRIDE";
        };

        import: import {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(KP_ENTER)>;
            label = "IMPORT";
        };

        implement: implement {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(I)>;
            label = "IMPLEMENT";
        };

        constructor: constructor {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(INSERT)>;
            label = "CONSTRUCTOR";
        };

        run: run {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(F10)>;
            label = "RUN";
        };

        debug: debug {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(F9)>;
            label = "DEBUG";
        };

        lambda: lambda {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT &kp LEFT_BRACE &kp RBRC>;
            label = "LAMBDA";
        };

        string1: string1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(H) &kp Y &kp D &kp R &kp O &kp G &kp E &kp N &kp LS(P) &kp E &kp R &kp O &kp X &kp I &kp D &kp E &kp UNDER &kp LS(H) &kp N2 &kp LS(O) &kp N2 &kp KP_ENTER>;
            label = "STRING1";
        };

        string2: string2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(S) &kp AT &kp L &kp PLUS &kp LS(N) &kp A &kp N1 &kp LS(C) &kp L &kp N1 &kp KP_ENTER>;
            label = "STRING2";
        };
    };

    combos {
        compatible = "zmk,combos";

        caps {
            bindings = <&caps_word>;
            key-positions = <16 13>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 9>;
        };

        BT_clear {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <29 20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "DEF";
            bindings = <
  &kp Q       &kp W           &kp F               &kp P                    &kp B        &kp J        &kp L                     &kp U                &kp Y            &kp DOUBLE_QUOTES
  &hm LGUI A  &hm LEFT_ALT R  &hm LEFT_CONTROL S  &shift_tap LEFT_SHIFT T  &kp G        &kp M        &shift_tap RIGHT_SHIFT N  &hm RIGHT_CONTROL E  &hm RIGHT_ALT I  &hm RIGHT_GUI O
  &kp Z       &kp X           &kp C               &kp D                    &kp V        &kp K        &kp H                     &kp COMMA            &kp PERIOD       &kp UNDER
                              &kp ESCAPE          &lt 1 SPACE              &lt 2 TAB    &lt 3 ENTER  &lt 4 BACKSPACE           &kp DELETE
            >;
        };

        number {
            bindings = <
  &kp LC(Z)       &kp LC(X)    &kp LC(C)      &kp LC(V)  &kp LC(Y)      &kp KP_PLUS      &hm F7 NUMBER_7  &hm F8 NUMBER_8  &hm F9 NUMBER_9  &hm F12 ASTERISK
  &kp LEFT_ARROW  &kp UP       &kp DOWN       &kp RIGHT  &kp PERCENT    &kp EXCLAMATION  &hm F4 NUMBER_4  &hm F5 NUMBER_5  &hm F6 NUMBER_6  &hm F11 EQUAL
  &kp HOME        &kp PAGE_UP  &kp PAGE_DOWN  &kp END    &kp DOLLAR     &kp MINUS        &hm F1 NUMBER_1  &hm F2 NUMBER_2  &hm F3 NUMBER_3  &hm F10 SLASH
                               &none          &none      &none          &kp ENTER        &kp N0           &kp PERIOD
            >;
        };

        symbols {
            bindings = <
  &none           &none         &none           &none            &kp SINGLE_QUOTE    &kp HASH       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PIPE       &kp QUESTION
  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp SEMICOLON       &kp BACKSLASH  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AMPERSAND  &kp CARET
  &none           &none         &none           &none            &kp GRAVE           &kp AT_SIGN    &kp LESS_THAN         &kp GREATER_THAN       &kp COLON      &kp TILDE
                                &none           &none            &none               &kp KP_ENTER   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
            >;

            label = "acute";
        };

        mouse {
            bindings = <
  &kp LG(LEFT_ARROW)  &kp LG(UP_ARROW)  &kp LG(DOWN_ARROW)  &kp LG(RIGHT_ARROW)  &kp LA(TAB)     &kp LS(LA(LC(A)))         &kp LS(LA(LC(B)))         &kp LS(LA(LC(C)))         &kp LS(LA(LC(D)))         &kp LS(LA(LC(E)))
  &none               &none             &none               &none                &kp KP_ENTER    &kp LS(LA(LC(NUMBER_6)))  &kp LA(LC(LS(NUMBER_7)))  &kp LS(LA(LC(NUMBER_8)))  &kp LS(LA(LC(NUMBER_9)))  &kp LS(LA(LC(NUMBER_0)))
  &none               &none             &none               &none                &none           &kp LS(LA(LC(NUMBER_1)))  &kp LS(LA(LC(NUMBER_2)))  &kp LS(LA(LC(NUMBER_3)))  &kp LS(LA(LC(NUMBER_4)))  &kp LS(LC(LA(NUMBER_5)))
                                        &mkp LCLK           &mkp MCLK            &mkp RCLK       &none                     &none                     &none
            >;

            label = "circ";
        };

        hotkeys {
            bindings = <
  &find      &override        &implement  &constructor  &run         &none     &none           &none         &none           &none
  &unindent  &surround        &import     &none         &debug       &string2  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW
  &replace   &inline_comment  &comment    &explore      &rename      &string1  &none           &none         &none           &none
                              &lambda     &reformat     &kp LC(A)    &none     &none           &none
            >;
        };
    };
};
