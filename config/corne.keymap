/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define DEFAULT_L 0

&lt {
    quick-tap-ms = <200>;
    tapping-term-ms = <200>;
};

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <200>;
        };

        vim_i: vim_i {
            compatible = "zmk,behavior-mod-morph";
            label = "VIM_I";
            bindings = <&to 0>, <&vim_I>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        vim_o: vim_o {
            compatible = "zmk,behavior-mod-morph";
            label = "VIM_O";
            bindings = <&next_line_enter>, <&previous_line_enter>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        vim_c_r: vim_c_r {
            compatible = "zmk,behavior-mod-morph";
            label = "VIM_C_R";
            #binding-cells = <0>;
            bindings = <&none>, <&kp LG(LS(Z))>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        vim_backspace: vim_backspace {
            compatible = "zmk,behavior-mod-morph";
            label = "VIM_BACKSPACE";
            bindings = <&kp LA(BACKSPACE)>, <&kp LA(DELETE)>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        slashandbackslash: slashandbackslash {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASHANDBACKSLASH";
            bindings = <&kp SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        quote: quote {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTE";
            bindings = <&kp SINGLE_QUOTE>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        coma_semi: coma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMA_SEMI";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp PERIOD>, <&kp COLON>, <&kp LA(COLON)>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        q_grave: q_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "Q_GRAVE";
            bindings = <&kp Q>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        home: home {
            compatible = "zmk,behavior-mod-morph";
            label = "HOME";
            bindings = <&kp LG(LEFT)>, <&kp HOME>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        end: end {
            compatible = "zmk,behavior-mod-morph";
            label = "END";
            bindings = <&kp LG(RIGHT)>, <&kp END>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RALT)>;
        };

        quote_grave: quote_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTE_GRAVE";
            bindings = <&kp SINGLE_QUOTE>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        hm_quotes: hm_quotes {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_QUOTES";
            bindings = <&kp>, <&quote_grave>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };

        dot_comma: dot_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COMMA";
            bindings = <&kp DOT>, <&kp COMMA>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        multiply: multiply {
            compatible = "zmk,behavior-mod-morph";
            label = "MULTIPLY";
            bindings = <&kp ASTERISK>, <&kp LEFT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        divide: divide {
            compatible = "zmk,behavior-mod-morph";
            label = "divide";
            bindings = <&kp SLASH>, <&kp LEFT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_7: num_7 {
            compatible = "zmk,behavior-mod-morph";
            label = "num_7";
            bindings = <&kp N7>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        equals_thic_arrow: equals_thic_arrow {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUALS_THIC_ARROW";
            bindings = <&kp EQUAL>, <&thic_arrow>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_0: num_0 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_0";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp N0>, <&kp LEFT_BRACKET>;
        };

        num_1: num_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_1";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp N1>, <&kp RIGHT_BRACKET>;
        };

        num_2: num_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_2";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp N2>, <&kp COMMA>;
        };

        num_3: num_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_3";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp N3>, <&kp DOT>;
        };

        num_5: num_5 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_5";
            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            bindings = <&hm RIGHT_GUI N5>, <&kp LT>;
        };

        num_6: num_6 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_6";
            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            bindings = <&hm RIGHT_ALT NUMBER_6>, <&kp GT>;
        };

        hm_quote_minus: hm_quote_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "HM_QUOTE_MINUS";
            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            bindings = <&hm RCTRL MINUS>, <&kp DOUBLE_QUOTES>;
        };

        num_4: num_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_4";
            bindings = <&hm RIGHT_SHIFT N4>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        always_tilde: always_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "ALWAYS_TILDE";
            bindings = <&kp LA(N)>, <&kp LA(N)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_8: num_8 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_8";
            bindings = <&kp N8>, <&kp LA(LS(NUMBER_2))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        w_euro: w_euro {
            compatible = "zmk,behavior-mod-morph";
            label = "W_EURO";
            bindings = <&kp W>, <&kp LS(LA(NUMBER_2))>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        a_grave_ctrl: a_grave_ctrl {
            compatible = "zmk,behavior-mod-morph";
            label = "A_GRAVE_CTRL";
            bindings = <&hm LCTRL A>, <&kp A>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        always_grave: always_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "ALWAYS_GRAVE";
            bindings = <&kp GRAVE>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        always_acute: always_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "ALWAYS_ACUTE";
            bindings = <&kp LA(E)>, <&kp LA(E)>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_LSFT|MOD_RSFT)>;
        };

        always_circ: always_circ {
            compatible = "zmk,behavior-mod-morph";
            label = "ALWAYS_CIRC";
            bindings = <&kp LA(I)>, <&kp LA(I)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cmd_num_4: cmd_num_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_NUM_4";
            bindings = <&num_4>, <&kp NUMBER_4>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        cmd_num_5: cmd_num_5 {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_NUM_5";
            bindings = <&num_5>, <&kp N5>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        cmd_num_1: cmd_num_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_NUM_1";
            bindings = <&num_1>, <&kp NUMBER_1>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        cmd_num_3: cmd_num_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_NUM_3";
            bindings = <&num_3>, <&kp NUMBER_3>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        cmd_num_2: cmd_num_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_NUM_2";
            bindings = <&num_2>, <&kp NUMBER_2>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        cmd_num_6: cmd_num_6 {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_NUM_6";
            bindings = <&num_6>, <&kp NUMBER_6>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        cmd_num_7: cmd_num_7 {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_NUM_7";
            bindings = <&num_7>, <&kp N7>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        cmd_num_8: cmd_num_8 {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_NUM_8";
            bindings = <&num_8>, <&kp N8>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        cmd_w_euro: cmd_w_euro {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_W_EURO";
            bindings = <&w_euro>, <&kp W>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI|MOD_LCTL|MOD_LSFT|MOD_RCTL|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RSFT|MOD_RCTL)>;
        };

        shift_tap: shift_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };

        plus_gte: plus_gte {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_GTE";
            bindings = <&kp PLUS>, <&gte>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minus_lte: minus_lte {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_LTE";
            bindings = <&kp MINUS>, <&lte>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        p_question: p_question {
            compatible = "zmk,behavior-mod-morph";
            label = "P_QUESTION";
            bindings = <&kp P>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        switch_layout: switch_layout {
            compatible = "zmk,behavior-tap-dance";
            label = "SWITCH_LAYOUT";
            #binding-cells = <0>;
            bindings = <&to 1>, <&to 0>;
        };
    };

    macros {
        reformat: aacute {
            compatible = "zmk,behavior-macro";
            label = "AACUTE";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(O)) &kp LA(LC(L))>;
        };

        rename: rename {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(F6)>;
            label = "RENAME";
        };

        explore: explore {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(E)>;
            label = "EXPLORE";
        };

        comment: comment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SLASH)>;
            label = "COMMENT";
        };

        inline_comment: inline_comment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(SLASH))>;
            label = "INLINE_COMMENT";
        };

        replace: replace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(R)>;
            label = "REPLACE";
        };

        unindent: unindent {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(TAB)>;
            label = "UNINDENT";
        };

        find: find {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(F)>;
            label = "FIND";
        };

        surround: surround {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(T))>;
            label = "SURROUND";
        };

        override: override {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(O)>;
            label = "OVERRIDE";
        };

        import: import {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(KP_ENTER)>;
            label = "IMPORT";
        };

        implement: implement {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(I)>;
            label = "IMPLEMENT";
        };

        constructor: constructor {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(INSERT)>;
            label = "CONSTRUCTOR";
        };

        run: run {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(F10)>;
            label = "RUN";
        };

        debug: debug {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(F9)>;
            label = "DEBUG";
        };

        lambda: lambda {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT &kp LEFT_BRACE &kp RBRC>;
            label = "LAMBDA";
        };

        string1: string1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(H) &kp Y &kp D &kp R &kp O &kp G &kp E &kp N &kp LS(P) &kp E &kp R &kp O &kp X &kp I &kp D &kp E &kp UNDER &kp LS(H) &kp N2 &kp LS(O) &kp N2 &kp KP_ENTER>;
            label = "STRING1";
        };

        string2: string2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(S) &kp AT &kp L &kp PLUS &kp LS(N) &kp A &kp N1 &kp LS(C) &kp L &kp N1 &kp KP_ENTER>;
            label = "STRING2";
        };
    };

    combos {
        compatible = "zmk,combos";

        toggle_shift {
            bindings = <&caps_word>;
            key-positions = <16 13>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "DEF";
            bindings = <
  &kp Q       &kp W           &kp F               &kp P                    &kp B        &kp J        &kp L                     &kp U                &kp Y            &kp DOUBLE_QUOTES
  &hm LGUI A  &hm LEFT_ALT R  &hm LEFT_CONTROL S  &shift_tap LEFT_SHIFT T  &kp G        &kp M        &shift_tap RIGHT_SHIFT N  &hm RIGHT_CONTROL E  &hm RIGHT_ALT I  &hm RIGHT_GUI O
  &kp Z       &kp X           &kp C               &kp D                    &kp V        &kp K        &kp H                     &kp COMMA            &kp PERIOD       &kp UNDER
                              &kp LEFT_SHIFT      &lt 1 SPACE              &lt 2 TAB    &lt 3 ENTER  &lt 4 DEL                 &kp BACKSPACE
            >;
        };

        number {
            bindings = <
  &kp K_UNDO      &kp K_CUT    &kp K_COPY     &kp K_PASTE  &kp K_REDO     &kp KP_PLUS      &hm F7 NUMBER_7  &hm F8 NUMBER_8  &hm F9 NUMBER_9  &hm F12 ASTERISK
  &kp LEFT_ARROW  &kp UP       &kp DOWN       &kp RIGHT    &kp PERCENT    &kp EXCLAMATION  &hm F4 NUMBER_4  &hm F5 NUMBER_5  &hm F6 NUMBER_6  &hm F11 EQUAL
  &kp HOME        &kp PAGE_UP  &kp PAGE_DOWN  &kp END      &kp DOLLAR     &kp MINUS        &hm F1 NUMBER_1  &hm F2 NUMBER_2  &hm F3 NUMBER_3  &hm F10 SLASH
                               &none          &none        &none          &kp ENTER        &kp PERIOD       &kp N0
            >;
        };

        symbols {
            bindings = <
  &none           &none         &none           &none            &kp SINGLE_QUOTE    &kp HASH       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PIPE       &kp QUESTION
  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp SEMICOLON       &kp BACKSLASH  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AMPERSAND  &kp CARET
  &none           &none         &none           &none            &kp GRAVE           &kp AT_SIGN    &kp LESS_THAN         &kp GREATER_THAN       &kp COLON      &kp TILDE
                                &none           &none            &none               &kp KP_ENTER   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
            >;

            label = "acute";
        };

        mouse {
            bindings = <
  &kp LG(LEFT_ARROW)  &kp LG(UP_ARROW)  &kp LG(DOWN_ARROW)  &kp LG(RIGHT_ARROW)  &none        &none  &none  &none  &none  &none
  &none               &none             &none               &none                &none        &none  &none  &none  &none  &none
  &none               &none             &none               &none                &none        &none  &none  &none  &none  &none
                                        &mkp LCLK           &mkp MCLK            &mkp RCLK    &none  &none  &none
            >;

            label = "circ";
        };

        hotkeys {
            bindings = <
  &find      &override        &implement  &constructor  &run         &none     &none           &none         &none           &none
  &unindent  &surround        &import     &none         &debug       &string2  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW
  &replace   &inline_comment  &comment    &explore      &rename      &string1  &none           &none         &none           &none
                              &lambda     &reformat     &kp LC(A)    &none     &none           &none
            >;
        };
    };
};
